name: Create container for latest version

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  release:
    types: [published, released]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: kekonn/fercord

jobs:
  build-container:
    if: ${{ startsWith(github.ref, 'refs/tags/fercord_') && startsWith(github.event.release.tag_name, 'fercord_bot') && github.event.release.prerelease == false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0 # all branches, history and tags

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_DEPLOY_TOKEN }}

      - name: Get Tag name and version
        id: latestTag
        run: | 
          latest_tag=$(git describe --tags $(git rev-list --tags="${{ github.event.release.tag_name }}" --max-count=1))
          if [ -z "$latest_tag" ]; then
            echo "::error::No tags found"
            exit 1
          fi
          IFS='-'
          read -r $tag_name $tag_version << "$latest_tag"
          IFS=' '
          echo "tag=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "tagVersion=$tag_version" >> "$GITHUB_OUTPUT"
          echo "tagName=$tag_name" >> "$GITHUB_OUTPUT"

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.latestTag.outputs.tagVersion }},enable={{is_default_branch}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Docker/Dockerfile
          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
